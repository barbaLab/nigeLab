function defaultHotkeyHelpFcn(key_in)
% DEFAULTHOTKEYHELPFCN  Default function mapping hotkeys for video scoring
%
%  Issued whenever 'h' is pressed for nigeLab.Block.scoreVideo; describes
%  what the different hotkeys do. A new version should be made to match any
%  ad hoc HotkeyFcn placed in nigeLab.workflow.
%
%  defaultHotkeyHelpFcn();  Print help for all hotkeys to command window
%  defaultHotkeyHelpFcn(key_in);  Print help for specific keypress
%
%  As configured, "key_in" is only used when the 'control' key modifier is
%  pressed simultaneously.

%% Print reference links to objects associated with video scoring
clc; % If too much in Command Window, it messes with fprintf it seems
str_b = nigeLab.utils.getNigeLink('nigeLab.libs.behaviorInfo');
str_v = nigeLab.utils.getNigeLink('nigeLab.libs.VidGraphics');
str_g = nigeLab.utils.getNigeLink('nigeLab.libs.TimeScrollerAxes');

nigeLab.utils.cprintf('Comments','\n\nSee also:\n');
fprintf(1,'-->\t%s  \t\t:  Keeps track of behavior (event) information.\n',str_b);
fprintf(1,'-->\t%s \t\t:  Keeps track of video information.\n',str_v);
fprintf(1,'-->\t%s  \t:  Axes with markers at top of interface.\n\n',str_g);

%% List all pairs here
% Fields are key names; values are char arrays describing what they do.
pairs = struct( ...
   'backquote',['(`) Set all unset values to preset defaults' newline ...
                sprintf('\t\t\t')  '--> See ~/+nigeLab/+workflow/defaultHotkeyHelpFcn.m, approx line 18' newline],...
   'comma',    ['(,) Set a trial as "non-stereotyped" (Stereotyped == 0)' newline...
                sprintf('\t\t\t')  '--> e.g. He retrieved the pellet in a weird way' newline], ...
   'period',   ['(.) Set a trial as "stereotyped" (Stereotyped == 1)' newline ...
                sprintf('\t\t\t')  '--> e.g. He retrieved the pellet in more-or-less the usual (qualitative) pattern' newline],...
   'i',        ['Set "initial" frame in trial frame series (Init == current ts)' newline...
                sprintf('\t\t\t')  '--> e.g. The earliest frame to use as reference for actual "Trial"' newline ...
                sprintf('\t\t\t')  '--> Press [shift + i] to jump to current-trial ''Init'' timestamp (if non-NaN and non-inf)' newline], ...
   'o',        ['Set "no initial" frame in trial (Init == inf)' newline...
                sprintf('\t\t\t')  '--> e.g. He never made it to the door, or made it but did not attempt a reach' newline ...
                sprintf('\t\t\t')  '--> Press [shift + o] to jump to current-trial ''Init'' timestamp (if non-NaN and non-inf)' newline], ...
   't',        ['Set reach frame (Reach == current ts)' newline...
                sprintf('\t\t\t')  '--> e.g. The "toe-off" frame; earliest you see him initiate the reach' newline ...
                sprintf('\t\t\t')  '--> Press [shift + t] to jump to current-trial ''Reach'' timestamp (if non-NaN and non-inf)' newline], ...
   'r',        ['Set "no reach" for trial (Reach == inf)' newline...
                sprintf('\t\t\t')  '--> e.g. He never made it to the door, or made it but did not attempt a reach' newline ...
                sprintf('\t\t\t')  '--> Press [shift + r] to jump to current-trial ''Reach'' timestamp (if non-NaN and non-inf)' newline], ...
   'g',        ['Set grasp frame (Grasp == current ts)' newline...
                sprintf('\t\t\t')  '--> e.g. The clearest alignment point, the frame when his paw goes from open to closed' newline ...
                sprintf('\t\t\t')  '--> Press [shift + g] to jump to current-trial ''Grasp'' timestamp (if non-NaN and non-inf)' newline], ...
   'f',        ['Set "no grasp" for trial (Grasp == inf)' newline...
                sprintf('\t\t\t')  '--> e.g. There was no "stereotyped" contraction of the distal forelimb' newline ...
                sprintf('\t\t\t')  '--> Press [shift + f] to jump to current-trial ''Grasp'' timestamp (if non-NaN and non-inf)' newline], ...
   'b',        ['Set "both" frame (Support == current ts)' newline...
                sprintf('\t\t\t')  '--> e.g. at the apex of any movement with his non-reaching forelimb' newline ...
                sprintf('\t\t\t')  '--> Press [shift + b] to jump to current-trial ''Support'' timestamp (if non-NaN and non-inf)' newline], ...
   'v',        ['Set "no support" for trial (Support == inf)' newline...
                sprintf('\t\t\t')  '--> e.g. the non-reaching forelimb had negligible or no motion' newline ...
                sprintf('\t\t\t')  '--> Press [shift + v] to jump to current-trial ''Support'' timestamp (if non-NaN and non-inf)' newline], ...
   'n',        ['Set "nose" frame (Nose through slot == current ts)' newline ...
                sprintf('\t\t\t')  '--> e.g. at the beginning of the trial when he first pokes nose through reach slot' newline ...
                sprintf('\t\t\t')  '--> Press [shift + n] to jump to current-trial ''Nose'' timestamp (if non-NaN and non-inf)' newline], ...
   'm',        ['Set "no nose" for trial (Nose == inf)' newline ...
                sprintf('\t\t\t')  '--> Press [shift + m] to jump to current-trial ''Nose'' timestamp (if non-NaN and non-inf)' newline], ...
   'multiply', ['(* on numpad) Set "complete" frame (Complete == current ts)' newline ...
                sprintf('\t\t\t\t\t') '--> e.g. he reached out of slot and pulled back into box' newline ...
                sprintf('\t\t\t\t\t') '--> Press [shift + *] to jump to current-trial ''Complete'' timestamp (if non-NaN and non-inf)' newline], ...
   'divide',   ['(/ on numpad) Set "incomplete" for trial (Complete == inf) ' newline ...
                sprintf('\t\t\t\t\t') '--> e.g. he reached and then left paw out for a long time' newline ...
                sprintf('\t\t\t\t\t') '--> Press [shift + /] to jump to current-trial ''Complete'' timestamp (if non-NaN and non-inf)' newline],...
   'w',        ['Set outcome as Successful (Outcome == 1)' newline],...
   'x',        ['Set outcome as Unsuccessful (Outcome == 0)' newline],...
   'e',        ['Set Forelimb or Door [+ Shift] as "Right" (Forelimb == 1 or Door == 1). ' newline ...
                sprintf('\t\t\t') '--> Press [alt + e] to set ALL Forelimb trials as "Right"' newline ...
                sprintf('\t\t\t') '--> Press [alt + shift + e] to set ALL Door trials as "Right"' newline], ...
   'q',        ['Set Forelimb or Door [+ shift] as "Left" (Forelimb == 0 or Door == 0). ' newline ...
                sprintf('\t\t\t') '--> Press [alt + q] to set ALL Forelimb trials as "Left"' newline ...
                sprintf('\t\t\t') '--> Press [alt + shift + q] to set ALL Door trials as "Left"' newline], ...
   'a',        ['Go to previous FRAME' newline], ...
   'd',        ['Go to next FRAME' newline], ...
   'leftarrow',['Go to previous TRIAL' newline], ...
   'rightarrow',['Go to next TRIAL' newline],...
   'uparrow',  ['Zoom IN on TimeScrollerAxes' newline],...
   'downarrow', ['Zoom OUT on TimeScrollerAxes' newline],...
   'c',        ['CENTER TimeScrollerAxes on Frame-Time Indicator' newline],...
   's',        ['Press [alt + s] to SAVE Block & scoring metadata ' newline...
                sprintf('\t\t\t') '--> Scoring is saved automatically when a NEW TRIAL is selected' newline ...
                sprintf('\t\t\t') '--> Saving updates things like ROIs assigned to individual Videos, etc.' newline],...
   'numpad0',  ['(''0'' on numpad) Set number of pellets on platform to zero' newline],...
   'numpad1',  ['(''1'' on numpad) Set number of pellets on platform to 1' newline],...
   'numpad2',  ['(''2'' on numpad) Set number of pellets on platform to 2' newline],...
   'numpad3',  ['(''3'' on numpad) Set number of pellets on platform to 3' newline],...
   'numpad4',  ['(''4'' on numpad) Set number of pellets on platform to 4' newline],...
   'numpad5',  ['(''5'' on numpad) Set number of pellets on platform to 5' newline],...
   'numpad6',  ['(''6'' on numpad) Set number of pellets on platform to 6' newline],...
   'numpad7',  ['(''7'' on numpad) Set number of pellets on platform to 7' newline],...
   'numpad8',  ['(''8'' on numpad) Set number of pellets on platform to 8' newline],...
   'numpad9',  ['(''9'' on numpad) Set number of pellets on platform to "9+"' newline],...
   'subtract', ['(''-'' on numpad) Indicate that pellet IS NOT in usual spot ' newline ...
                sprintf('\t\t\t\t\t') '--> Typically should be ONE pellet in front of rat' newline],...
   'add',      ['(''+'' on numpad) Indicate that pellet IS in usual spot ' newline...
                sprintf('\t\t\t\t\t') '--> (PelletPresent == 1; # Pellets on platform > 0)' newline],...
   'delete',   ['(''delete'' next to ''end'') Remove the current trial (TrialMask == 0)' newline ...
                sprintf('\t\t\t\t')   '--> Auto-skips to next trial' newline],...
   'backslash',['(''\'' above ''Enter'') Restore current trial (TrialMask == 1)' newline],...
   'space',    ['(''space'' bar) Play or Pause the video [note: this is finnicky]' newline]);

%% Check input and print pairs according to key_in
all_pairs = fieldnames(pairs);
if nargin < 1
   key_in = all_pairs;
else
   if ~iscell(key_in)
      error('key_in should be a cell or cell array input');
   end
end

for i = 1:numel(key_in)
   if ismember(key_in{i},all_pairs)
      printKeyDescriptorPair(key_in{i},pairs.(key_in{i}));
   else
      printKeyDescriptorPair(key_in{i});
   end
end


%%
   % Helper function to print key-descriptor pairs
   function printKeyDescriptorPair(key,descriptor)
      % PRINTKEYDESCRIPTORPAIR  Helper to allow iterative printing of key
      %  and descriptor pairs.
      
      if nargin < 2
         descriptor = 'Unused';
      end
      f = which('nigeLab.workflow.defaultVideoScoringHotkey');
      fid = fopen(f,'r');
      A = textscan(fid,'%s','Delimiter','\n');
      A = A{1};
      fclose(fid);
      idx = find(contains(A,'case ''')); % Line numbers
      a = A(idx);
      strMatch = sprintf('''%s''',key);
      keyCaseIndex = contains(a,strMatch);
      if sum(keyCaseIndex) == 1
         lineNum = idx(keyCaseIndex);
         tag = ['Shortcut <strong>line</strong> (' num2str(lineNum) ')'];
      else
         lineNum = 1;
         tag = 'Shortcut function';
      end
      str_wf = nigeLab.utils.getNigeLink('nigeLab.workflow.defaultHotkeyFcn',lineNum);
      fprintf(1,'\t-->\t%s\t:\t%s\n',str_wf,tag);
      nigeLab.utils.cprintf('*Magenta','\t-->\t%s: ',key);
      nigeLab.utils.cprintf('Text',' %s \n',descriptor);
   end


end